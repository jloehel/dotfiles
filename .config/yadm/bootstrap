#!/bin/bash

# Because Git submodule commands cannot operate without a work tree, they must
# be run from within $HOME (assuming this is the root of your dotfiles)
cd "$HOME" || exit

echo "Create some folders"
mkdir -p projects/{go/{bin,pkg,src},github.com} backups

echo "Init submodules"
yadm submodule update --recursive --init
git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k"

system_type=$(uname -s)

if [ "$system_type" = "Linux" ];then
    release_id=$(grep "^ID=\".*\"$" /etc/os-release | cut -d"=" -f2 | tr -d "\"")
    pretty_name=$(grep "^PRETTY_NAME=\".*\"$" /etc/os-release | cut -d"=" -f2 | tr -d "\"")
    echo "Installing applications and build dependencies for ${pretty_name} ..."
    if [ "$release_id" = "opensuse-leap" ] || [ "$release_id" = "opensuse-tumbleweed" ];then
        sudo zypper ref
        sudo zypper in \
          vim \
          neovim \
          tmux \
          go \
          curl \
          words \
          words-british \
          yarn \
          gopls \
          clang \
          universal-ctags \
          python313-python-lsp-server \
          python313-ruff \
          python3-bandit \
          python313-isort \
          nodejs-common \
          python313-black
    fi
    if [ "$release_id" = "fedora" ];then
        sudo yum in \
          vim \
          tmux \
          curl \
          words \
          yarnpkg \
          gopls \
          clang \
          global-ctags \
          ruff \
          bandit \
          python3-isort \
          nodejs \
          black
      fi
fi

if command -v vim >/dev/null 2>&1; then
  echo "Creating Backup folder for vim ..."
  mkdir -p .vim/{backups,swap,undo,spell}
  mkdir -p .config/nvim/undo
  mkdir -p  ~/.vim/thesaurus/ && curl http://www.gutenberg.org/files/3202/files/mthesaur.txt -o ~/.vim/thesaurus/mthesaur.txt
  echo "Bootstrapping vim plugins ..."
  vim '+PlugUpdate' '+qall'
fi
